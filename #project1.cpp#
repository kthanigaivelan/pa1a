#include "Hash.h"
#include "Hashbucket.h"
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main(int argc, char *argv[]){
  ifstream file;
  string word;

  file.open(argv[1]);
  getline(file, word);
  long p = stoll(word);
  getline(file, word);
  long C = stoll(word);
  file.close();

  //h = new Hashbucket[p];
  //for(long i=0; i<p; i++){
  //h[i] = new Hashbucket();
  //}
  /*
  file.open(argv[2]);
  while(getline(file,word)){
    size++;
    long long key = hornerVal(word);
    h[key]->increment();
  }
  file.close();
  */
  Hash h1(p,C,argc,argv);
  cout << "Size of input: " << h1.inputSize() << endl;
  cout << "Number of words in table: " << h1.numInserted() << endl;
  cout << "Primary array size: " << h1.primaryArraySize() << endl;
  cout << "Maximum number of collisions in a hashbucket: " << h1.numCollisions() << endl;;
  cout << "The number of hashbuckets b with x elements:" << endl;
  h1.elements();
  //cout << endl;
  cout << "Keys in most populated bucket: ";
  h1.maxWords();
  cout << endl;

  cout << "Queries" << endl;
  if(argc == 4){
    Size of input: 10000
Number of words in table: 10000
Primary array size: 70717
Maximum number of collisions in a hashbucket: 3
The number of hashbuckets b with x elements:
x=0 : b=61394
x=1 : b=8677
x=2 : b=617
x=3 : b=27
x=4 : b=2
x=5 : b=0
x=6 : b=0
x=7 : b=0
x=8 : b=0
x=9 : b=0
x=10 : b=0
x=11 : b=0
x=12 : b=0
x=13 : b=0
x=14 : b=0
x=15 : b=0
x=16 : b=0
x=17 : b=0
x=18 : b=0
x=19 : b=0
x=20 : b=0
Keys in most populated bucket: colour general portion receives 

Queries
Key "outcomes" exists at (62978, 1).
Key "chess" exists at (13947, 0).
Key "otter" does not exist.
Key "simulation" exists at (33650, 0).
Key "png" does not exist.
Key "trays" does not exist.
Key "louisville" exists at (36818, 0).
    file.open(argv[3]);
      while(getline(file,word)){
	h1.query(word);
      }
  }
  return 0;


}
